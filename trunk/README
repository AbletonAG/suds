The "Suds" web services client is a lightweight soap-based client for python.
The primary classes in the package are the:
  * ServiceProxy (serviceproxy.py)
  * WSDL  (wsdl.py)
   
 Basic features:
 
  * no class generation
  * provides an object-like API.
  * reads wsdl at runtime for encoding/decoding
  * provides for Document-Literal style SOAP binding
  * RPC-Literal (under construction)
  
Logging:

By default, the suds package logs at LEVEL=INFO using a console handler.
All messages are at level DEBUG or ERROR so, no messages are written
unless the user does the following: suds.logger(<desired package>).setLevel(logging.<desired-level>)
A common example (show sent/received soap messages):
>
> suds.logger('suds.serviceproxy').setLevel(logging.DEBUG)
>


Basic usage:

You will need to know the url for WSDL for each service used.  Simply create
a proxy for that service as follows:

> from serviceproxy import ServiceProxy
>
>myurl = 'http://localhost:7080/webservices/WebServiceTestBean?wsdl'
>
>myservice = ServiceProxy(url)


You can inspect service object with: __str()__ or __repr()__ as follows to get a list of
methods provide by the service:

>
>print myservice
>
service (WebServiceTestBeanService)
methods:
  addPerson(person{person})
  echo(arg0{string})
  getPersonByName(name{name})
  hello()
  testExceptions()
  updatePerson(person{anotherPerson}, name{name})
  
 The sample ouput lists that the service named "WebServiceTestBeanService"
 has methods such as addPerson() which takes a 'person' argument of type: 'person'.
 This is listed as:
 
 addPerson(person{person}) where parameter name is listed and followed by it's
 type as {person}.  There is a type (or class) named 'person'.
 
 So, to get person object to pass as an argument we need to get a person argument
 as follows:
 
 >
 > person = myservice.get_instance('person')
 > print person
 >
{
    phone = []
    age = NONE
    name = 
        {
            last = NONE
            first = NONE
        }
 }
 
 As you can see, the object is created as defined by the WSDL.  The list of phone
 number is empty so we'll have to create one:
 
>
> phone = service.get_instance('phone')
> phone.npa = 202
> phone.nxx = 555
> phone.number = 1212
>
 
 ... and the name and age need to be set and we need to create a
 name object first:
 
 >
> name = service.get_instance('name')
> name.first = 'Elmer'
> name.last = 'Fudd'
>

Now, let's set the properties of our person object

>
> person.name = name
> person.age = 35
> person.phone = [phone]
>

... and invoke our method named addPerson() as follows:

>
> try:
>    person_added = myservice.addPerson(person)
> except WebFault, e:
>    print e
>

It's that easy.

The ServiceProxy can be configured to throw web faults as WebFault or
to return a tuple (<status>, <returned-value>) instead as follows:

>
> myservice = ServiceProxy(url, faults=False)
> result = myservice.addPerson(person)
> print result
( 200, person ...)

Enumerations are handled as follows:

Let's say the wsdl defines the following enumeration,

<xs:simpleType name="resourceCategory">
  <xs:restriction base="xs:string">
    <xs:enumeration value="PLATFORM"/>
    <xs:enumeration value="SERVER"/>
    <xs:enumeration value="SERVICE"/>
  </xs:restriction>
</xs:simpleType>

 The service proxy can instantiate the enumeration so it can be 
 used.  Misspelled references to elements of the enum will raise a
 AttrError exception as:
 
 >
> resourceCategory = myservice.get_enum('resourceCategory')   <--- None if not found.
> myservice.getResourceByCategory(resourceCategory.PLATFORM)
>

The get_instance() method should always be used becuase it returns objects that already
have the proper structure and xsi:type="" attribute defined.  Since xsd supports nested type
definition, so does get_instance() using the (.) dot notation.  For example suppose the (name)
type was not defined as a top level "named" type but rather defined within the (person) type.
In this case creating a (name) object would have to be quanified by it's parent's name using the
dot notation as follows:

>
> name = service.get_instance('person.name') 
>

PROPERTY OBJECT

    Property object used to provide an object wrapper around a complex dictionary.
    
    Eg::

        { 'name':{'first':'Elvis', 'middle':'Grant', 'last':'Prestley'},
           'age':30, 
           'address':{'address':'123 Lakepines Dr.','city':'Memphis', 'state':'TN', 'zip':'87373'},
           'phone':'919-555-1212',
           'records':[{'name':'Elvis', 'year':'1956'}, 
                          {'name':'Just for You', 'year':'1957'},
                          {'name':'GI Blues', 'year':'1960'}],
           'born':'1935',
           }
        p = Property(data)
        p.died = '1977'   # assign value
        hair = p.get(haircolor='black') # get value and specify a default.
        print p.age
        print 'name= %s, %s, %s' % (p.name.first, p.name.last, p.name.middle)
        print 'city=%s' % p.address.city
        print 'state=%s' % p.address.state
        print [r.name for r in p.records]
        print 'born %s died %s' % (p.born, p.died)


RELEASE-NOTES:
=================================================

version-0.1.1 (12-17-07):
  This release marks the first release in fedora.

version-0.1.2 (12-18-07):
  This release contains an update to property adds:
    * metadata support
    * overrides: __getitem__, __setitem__, __contans__
    * changes property(reader|writer) to use the property.metadata
       to handle namespaces for XML documents.
    * fixes setup.py requires.
    
version-0.1.3 (12-19-07):
  * Fixes problem where nodes marked as a collection (maxOccurs > 1) not
     creating property objects with value=[] when mapped-in with < 2
     values by the DocumentReader.  Caused by missing the 
     bindings.Document.ReplyHint.stripns() (which uses the DocumentReader.stripns())
     conversion to DocumentReader.stripn() now returning a tuple (ns,tag) as
     of 0.1.2.
     
version-0.1.4 (12-21-07):
  * Provides for service method parameters to be None.
  * Add proper handling of method params that are lists of property
    objects.

version-0.1.5( not-released ):
 * Provides better logging in the modules get logger by hierarchal names.
